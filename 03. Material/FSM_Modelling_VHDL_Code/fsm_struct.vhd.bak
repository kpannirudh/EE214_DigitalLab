library ieee;
use ieee.std_logic_1164.all;

entity  fsm_struct is
 port(clock   : in std_logic; 
      reset: in std_logic;
      inp  : in std_logic;  --inp=0 => a inp=1 => b
      y: out std_logic  --y=1 =>Y  y=0=> N
      );
end seqDetector;


architecture struct of fsm_struct is

component  mydff is 
port ( clk,rst: in std_logic;
		d: in std_logic;
		q: out std_logic);
end component;

signal d1,d0,q1,q0:std_logic;-- d1,d0 are binary encoded form of Next State(PS) and q1,q0 are the encoded are binary encoded form of Present State(NS) 


begin
ff1:mydff port map(Clock,reset,d1,q1);
ff2:mydff port map(Clock,reset,d0,q0);
xor_gate: xor


end architecture;

library ieee;
use ieee.std_logic_1164.all;
entity myff is 
port ( clk,rst: in std_logic;
		d: in std_logic_vector(2 downto 0);
		q: out std_logic_vector(2 downto 0));
end entity;


architecture eq of myff is
begin

process(d,clk,rst)
begin
		if(rst = '1') then
			q<="000";
		elsif(rising_edge(clk)) then
			q<= d;
	   end if;
end process;
end architecture;


